<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml" xmlns:jersey="http://www.mulesoft.org/schema/mule/jersey" xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:ws="http://www.mulesoft.org/schema/mule/ws" xmlns:data-mapper="http://www.mulesoft.org/schema/mule/ee/data-mapper" xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
    xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:cxf="http://www.mulesoft.org/schema/mule/cxf" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
    xmlns:spring="http://www.springframework.org/schema/beans" version="EE-3.5.1"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/cxf http://www.mulesoft.org/schema/mule/cxf/current/mule-cxf.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/ws http://www.mulesoft.org/schema/mule/ws/current/mule-ws.xsd
http://www.mulesoft.org/schema/mule/ee/data-mapper http://www.mulesoft.org/schema/mule/ee/data-mapper/current/mule-data-mapper.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/jersey http://www.mulesoft.org/schema/mule/jersey/current/mule-jersey.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd">
    <ws:consumer-config name="FedPS-Order" wsdlLocation="contracts/FedPS-Order.wsdl" service="FedPSOrderService" port="FedPSOrderPort" serviceAddress="http://localhost:8080//webservices/FedPS-Order" doc:name="Web Service Consumer"/>
    <ws:consumer-config name="Web_Service_Consumer" wsdlLocation="contracts/FedPS-Order.wsdl" service="FedPSOrderService" port="FedPSOrderPort" serviceAddress="http://localhost:8080//webservices/FedPS-Order" doc:name="Web Service Consumer"/>
    <data-mapper:config name="Pojo_To_Xml_processQuote_" transformationGraphPath="pojo_to_xml_processquote_.grf" doc:name="Pojo_To_Xml_processQuote_"/>
    <data-mapper:config name="Xml_processQuoteResponse__To_Pojo" transformationGraphPath="xml_processquoteresponse__to_pojo.grf" doc:name="Xml_processQuoteResponse__To_Pojo"/>
    <ws:consumer-config name="CreditGeneral-Public" wsdlLocation="contracts/CreditGeneral-Public.wsdl" service="PaymentRPCPublicService" port="PaymentRPCPublicPort" serviceAddress="http://localhost:8080//webservices/Payment-Public-RPC" doc:name="Web Service Consumer"/>
    <data-mapper:config name="Pojo_To_Pojo" transformationGraphPath="pojo_to_pojo.grf" doc:name="Pojo_To_Pojo"/>
    <db:derby-config name="Derby-Glue" url="jdbc:derby:memory:glue;create=true" doc:name="Derby Configuration"/>
    <data-mapper:config name="JSON_To_Pojo" transformationGraphPath="json_to_pojo.grf" doc:name="JSON_To_Pojo"/>
    <data-mapper:config name="Pojo_To_Xml_process_payment_" transformationGraphPath="pojo_to_xml_process_payment_.grf" doc:name="Pojo_To_Xml_process_payment_"/>
    <data-mapper:config name="Pojo_To_Pojo_1" transformationGraphPath="pojo_to_pojo_1.grf" doc:name="Pojo_To_Pojo_1"/>
    <data-mapper:config name="Xml_processOrderFromQuoteResponse__To_Map" transformationGraphPath="xml_processorderfromquoteresponse__to_map.grf" doc:name="Xml_processOrderFromQuoteResponse__To_Map"/>
    <data-mapper:config name="Xml_processQuoteResponse__To_Map" transformationGraphPath="xml_processquoteresponse__to_map.grf" doc:name="Xml_processQuoteResponse__To_Map"/>
    <data-mapper:config name="Pojo_To_Xml_processOrderFromQuote_" transformationGraphPath="pojo_to_xml_processorderfromquote_.grf" doc:name="Pojo_To_Xml_processOrderFromQuote_"/>
    <flow name="init-database" doc:name="init-database">
        <http:inbound-endpoint exchange-pattern="request-response" host="localhost" port="9090" path="admin/db/init" doc:name="localhost:9090/admin/db/init"/>
        <flow-ref name="create-tables" doc:name="create-tables"/>
        <flow-ref name="insert-first-values" doc:name="insert-first-values"/>
        <set-payload value="initialized" doc:name="initialized"/>
    </flow>
    <sub-flow name="create-tables" doc:name="create-tables">
        <db:execute-ddl config-ref="Derby-Glue" doc:name="create table ADDRESS">
            <db:dynamic-query><![CDATA[CREATE TABLE address
(id int GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),
 street_nb varchar(10),
 street_name varchar(256),
 zip_code varchar(5),
 city varchar(30),
 country_code varchar(3),
 CONSTRAINT address_pk PRIMARY KEY (id))]]></db:dynamic-query>
        </db:execute-ddl>
        <db:execute-ddl config-ref="Derby-Glue" doc:name="create table CUSTOMER">
            <db:dynamic-query><![CDATA[CREATE TABLE customer
(id int GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1), 
 first_name varchar(256),
 last_name varchar(256), 
 email varchar(256), 
 catalogue boolean, 
 address_id int,
 CONSTRAINT customer_pk PRIMARY KEY (id),
 FOREIGN KEY(address_id) REFERENCES address(id))]]></db:dynamic-query>
        </db:execute-ddl>
        <db:execute-ddl config-ref="Derby-Glue" doc:name="create table PRODUCT">
            <db:dynamic-query><![CDATA[CREATE TABLE product
(id int GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1), 
 price double,
 reference varchar(256) UNIQUE,
 CONSTRAINT product_pk PRIMARY KEY (id))]]></db:dynamic-query>
        </db:execute-ddl>
        <db:execute-ddl config-ref="Derby-Glue" doc:name="create table MD_ORDER">
            <db:dynamic-query><![CDATA[CREATE TABLE md_order
(id int GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),
 customer_id int,
 cost double,
 order_date date,
 address_id int,
 carrier varchar(256),
 tracking_nb varchar(256),
 CONSTRAINT order_pk PRIMARY KEY (id),
 FOREIGN KEY(customer_id) REFERENCES customer(id),
 FOREIGN KEY(address_id) REFERENCES address(id))]]></db:dynamic-query>
        </db:execute-ddl>
        <db:execute-ddl config-ref="Derby-Glue" doc:name="create table ORDER_ITEM">
            <db:dynamic-query><![CDATA[CREATE TABLE order_item 
(id int GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1), 
 order_id int, 
 product_ref varchar(256), 
 quantity int, 
 unit_price double, 
 CONSTRAINT order_item_pk PRIMARY KEY (id),
 FOREIGN KEY(order_id) REFERENCES md_order(id),
 FOREIGN KEY(product_ref) REFERENCES product(reference))]]></db:dynamic-query>
        </db:execute-ddl>
    </sub-flow>
    <sub-flow name="insert-first-values" doc:name="insert-first-values">
        <db:insert config-ref="Derby-Glue" doc:name="insert address 1">
            <db:parameterized-query><![CDATA[INSERT INTO address (street_nb, street_name, zip_code, city, country_code)
VALUES ('930', 'Route des Colles', '06410', 'Biot', 'FR')]]></db:parameterized-query>
        </db:insert>
        <db:insert config-ref="Derby-Glue" doc:name="insert address 2">
            <db:parameterized-query><![CDATA[INSERT INTO address (street_nb, street_name, zip_code, city, country_code)
VALUES ('641', 'Avenue des Champs Elysees', '75008', 'Paris', 'FR')]]></db:parameterized-query>
        </db:insert>
        <db:insert config-ref="Derby-Glue" doc:name="insert customer 1">
            <db:parameterized-query><![CDATA[INSERT INTO customer (first_name, last_name, email, catalogue, address_id)
VALUES ('Alice', 'Durand', 'alice@durand.com', false, 1)]]></db:parameterized-query>
        </db:insert>
        <db:insert config-ref="Derby-Glue" doc:name="insert customer 2">
            <db:parameterized-query><![CDATA[INSERT INTO customer (first_name, last_name, catalogue, address_id)
VALUES ('Germaine', 'Martin', false, 2)]]></db:parameterized-query>
        </db:insert>
        <db:insert config-ref="Derby-Glue" doc:name="insert product 1">
            <db:parameterized-query><![CDATA[INSERT INTO product (price, reference) 
VALUES (18.6, 'OIH211')]]></db:parameterized-query>
        </db:insert>
        <db:insert config-ref="Derby-Glue" doc:name="insert product 2">
            <db:parameterized-query><![CDATA[INSERT INTO product (price, reference) 
VALUES (54.99, 'SXC266')]]></db:parameterized-query>
        </db:insert>
        <db:insert config-ref="Derby-Glue" doc:name="insert md-order 1">
            <db:parameterized-query><![CDATA[INSERT INTO md_order(customer_id, cost, order_date, address_id, carrier, tracking_nb) 
VALUES (1, 92.19, CURRENT_DATE, 1, 'FedPS', '722466204')]]></db:parameterized-query>
        </db:insert>
        <db:insert config-ref="Derby-Glue" doc:name="insert md-order 2">
            <db:parameterized-query><![CDATA[INSERT INTO md_order(customer_id, cost, order_date, address_id, carrier, tracking_nb)
VALUES (2, 47.5, CURRENT_DATE, 2, 'FedPS', '185509339')]]></db:parameterized-query>
        </db:insert>
        <db:insert config-ref="Derby-Glue" doc:name="insert order-item 1">
            <db:parameterized-query><![CDATA[INSERT INTO order_item (order_id, product_ref, quantity, unit_price) 
VALUES (1, 'OIH211', 2, 18.6)]]></db:parameterized-query>
        </db:insert>
        <db:insert config-ref="Derby-Glue" doc:name="insert order-item 2">
            <db:parameterized-query><![CDATA[INSERT INTO order_item (order_id, product_ref, quantity, unit_price) 
VALUES (1, 'SXC266', 1, 54.99)]]></db:parameterized-query>
        </db:insert>
        <db:insert config-ref="Derby-Glue" doc:name="insert order-item 3">
            <db:parameterized-query><![CDATA[INSERT INTO order_item (order_id, product_ref, quantity, unit_price) 
VALUES (2, 'OIH211', 5, 18.6)]]></db:parameterized-query>
        </db:insert>
    </sub-flow>
    <flow name="MisterDiscount-Order-WS" doc:name="MisterDiscount-Order-WS">
        <http:inbound-endpoint exchange-pattern="request-response" host="localhost" port="8081" path="misterdiscount/order" doc:name="http://localhost:8081/misterdiscount/order"/>
        <cxf:jaxws-service serviceClass="fr.unice.polytech.soa1.misterdiscount.services.Order" doc:name="Order"/>
        <set-variable variableName="operation" value="#[flowVars.cxf_operation.localPart]" doc:name="operation?"/>
        <choice doc:name="Choice">
            <when expression="#[operation == &quot;ProcessOrder&quot;]">
                <logger message="ProcessOrder branch" level="INFO" doc:name="ProcessOrder"/>
                <vm:outbound-endpoint exchange-pattern="request-response" path="/misterdiscount/order" doc:name="/misterdiscount/order"/>
            </when>
            <when expression="#[operation == &quot;GetOrderInformation&quot;]">
                <logger message="GetOrderInformation branch" level="INFO" doc:name="GetOrderInformation"/>
                <vm:outbound-endpoint exchange-pattern="request-response" path="/misterdiscount/orderinformation" doc:name="/misterdiscount/orderinformation"/>
            </when>
            <otherwise>
                <logger message="Unknown Operation" level="INFO" doc:name="Unknown Operation"/>
            </otherwise>
        </choice>
    </flow>
    <flow name="ProcessOrder-VM" doc:name="ProcessOrder-VM">
        <vm:inbound-endpoint exchange-pattern="request-response" path="/misterdiscount/order" doc:name="/misterdiscount/order"/>
        <scripting:component doc:name="if empty shipping address">
            <scripting:script engine="Groovy"><![CDATA[import groovy.sql.*
import java.sql.*
import java.util.*

import fr.unice.polytech.soa1.misterdiscount.business.Address

if (payload.shippingAddress == null) {
	def sql = Sql.newInstance("jdbc:derby:memory:glue", new Properties());

	def query = "SELECT * FROM address LEFT JOIN customer ON customer.address_id = address.id WHERE customer.id=" + payload.customerId;
	def result = sql.rows(query);

	Address a = new Address();
	a.setStreetNb(result[0]['STREET_NB']);
	a.setStreetName(result[0]['STREET_NAME']);
	a.setZipCode(result[0]['ZIP_CODE']);
	a.setCity(result[0]['CITY']);
	a.setCountryCode(result[0]['COUNTRY_CODE']);

	payload.shippingAddress = a;
}

return payload;]]></scripting:script>
        </scripting:component>
        <flow-ref name="FedPS-Quote-SubFlow" doc:name="FedPS-Quote"/>
        <flow-ref name="CreditGeneral-ProcessPayment-SubFlow" doc:name="CreditGeneral-ProcessPayment-SubFlow"/>
        <choice doc:name="payment success?">
            <when expression="#[flowVars.paymentSuccess==true]">
                <flow-ref name="FedPS-OrderFromQuote-SubFlow" doc:name="FedPS-OrderFromQuote"/>
            </when>
            <otherwise>
                <scripting:component doc:name="PaymentException">
                    <scripting:script engine="Groovy"><![CDATA[import fr.unice.polytech.soa1.misterdiscount.business.exceptions.PaymentException

throw new PaymentException();]]></scripting:script>
                </scripting:component>
            </otherwise>
        </choice>
        <!--<vm:outbound-endpoint exchange-pattern="one-way" path="/payment/process" doc:name="/payment/process"/>-->
        <!--<flow-ref name="CreditGeneral-Process-SubFlow" doc:name="CreditGeneral-Process"/>-->
    </flow>
    <sub-flow name="FedPS-Quote-SubFlow" doc:name="FedPS-Quote-SubFlow">
        <enricher  doc:name="flowVars.FedPScost and flowVars.FedPSquoteID">
            <processor-chain doc:name="Processor Chain">
                <data-mapper:transform config-ref="Pojo_To_Xml_processQuote_" doc:name="Pojo To Xml&lt;processQuote&gt;"/>
                <ws:consumer config-ref="FedPS-Order" operation="processQuote" doc:name="FedPS-Quote"/>
                <data-mapper:transform config-ref="Xml_processQuoteResponse__To_Map" doc:name="Xml&lt;processQuoteResponse&gt; To Map"/>
            </processor-chain>
            <enrich source="#[message.payload['cost']]" target="#[flowVars.FedPScost]"/>
            <enrich source="#[message.payload['id']]" target="#[flowVars.FedPSquoteID]"/>
        </enricher>
    </sub-flow>
    <sub-flow name="CreditGeneral-ProcessPayment-SubFlow" doc:name="CreditGeneral-ProcessPayment-SubFlow">
        <enricher target="#[flowVars.totalCost]" doc:name="flowVars.totalCost">
            <scripting:component doc:name="Compute amount">
                <scripting:script engine="Groovy"><![CDATA[import groovy.sql.*
import java.sql.*
import java.util.*

import fr.unice.polytech.soa1.misterdiscount.business.Item
import fr.unice.polytech.soa1.misterdiscount.business.exceptions.ProductNotFoundException

def sql = Sql.newInstance("jdbc:derby:memory:glue", new Properties());

def amount = 0;

for (Item i : payload.items) {
	def query = "SELECT * FROM product WHERE reference='" + i.getProductRef() + "'";
	def result = sql.rows(query);

	if (result.size() == 0)
		throw new ProductNotFoundException(i.getProductRef());
	else
		amount += result[0]['PRICE'];
}

amount += flowVars.FedPScost;

return amount;]]></scripting:script>
            </scripting:component>
        </enricher>
        <enricher target="#[flowVars.customerName]" doc:name="flowVars.customerName">
            <scripting:component doc:name="Customer name">
                <scripting:script engine="Groovy"><![CDATA[import groovy.sql.*
import java.sql.*
import java.util.*

def sql = Sql.newInstance("jdbc:derby:memory:glue", new Properties());

def query = "SELECT first_name, last_name FROM customer WHERE id=" + payload.customerId;
def result = sql.rows(query);

return result[0]['FIRST_NAME'] + " " + result[0]['LAST_NAME'];]]></scripting:script>
            </scripting:component>
        </enricher>
        <enricher target="#[flowVars.paymentSuccess]" doc:name="#[flowVars.paymentSuccess]">
            <processor-chain doc:name="Processor Chain">
                <data-mapper:transform config-ref="Pojo_To_Xml_process_payment_" doc:name="Pojo To Xml&lt;process_payment&gt;">
                    <data-mapper:input-arguments>
                        <data-mapper:input-argument key="customerName">#[flowVars.customerName]</data-mapper:input-argument>
                        <data-mapper:input-argument key="totalCost">#[flowVars.totalCost]</data-mapper:input-argument>
                    </data-mapper:input-arguments>
                </data-mapper:transform>
                <ws:consumer config-ref="CreditGeneral-Public" operation="process_payment" doc:name="CreditGeneral-Public-process_payment"/>
                <scripting:component doc:name="return true">
                    <scripting:script engine="Groovy"><![CDATA[return true;]]></scripting:script>
                </scripting:component>
            </processor-chain>
        </enricher>
    </sub-flow>
    <sub-flow name="FedPS-OrderFromQuote-SubFlow" doc:name="FedPS-OrderFromQuote-SubFlow">
        <enricher target="#[flowVars.finalEta]" doc:name="flowVars.finalEta">
            <processor-chain doc:name="Processor Chain">
                <data-mapper:transform config-ref="Pojo_To_Xml_processOrderFromQuote_" doc:name="Pojo To Xml&lt;processOrderFromQuote&gt;">
                    <data-mapper:input-arguments>
                        <data-mapper:input-argument key="customerName">#[flowVars.customerName]</data-mapper:input-argument>
                        <data-mapper:input-argument key="quoteId">#[flowVars.FedPSquoteID]</data-mapper:input-argument>
                    </data-mapper:input-arguments>
                </data-mapper:transform>
                <ws:consumer config-ref="FedPS-Order" operation="processOrderFromQuote" doc:name="FedPS-OrderFromQuote"/>
                <data-mapper:transform config-ref="Xml_processOrderFromQuoteResponse__To_Map" doc:name="Xml&lt;processOrderFromQuoteResponse&gt; To Map"/>
                <set-payload value="#[message.payload['eta']]" doc:name="eta"/>
            </processor-chain>
        </enricher>
        <logger message="AFTER FEDPS ORDER" level="INFO" doc:name="Logger"/>
        <data-mapper:transform config-ref="Pojo_To_Pojo_1" doc:name="Pojo To Pojo">
            <data-mapper:input-arguments>
                <data-mapper:input-argument key="finalEta">#[flowVars.finalEta]</data-mapper:input-argument>
                <data-mapper:input-argument key="totalCost">#[flowVars.totalCost]</data-mapper:input-argument>
            </data-mapper:input-arguments>
        </data-mapper:transform>
        <!-- <data-mapper:transform config-ref="Xml_processQuoteResponse__To_Pojo" doc:name="Xml&lt;processQuoteResponse&gt; To Pojo"/>-->
    </sub-flow>
    <flow name="GetOrderInformation-VM" doc:name="GetOrderInformation-VM">
        <vm:inbound-endpoint exchange-pattern="request-response" path="/misterdiscount/orderinformation" doc:name="/misterdiscount/orderinformation"/>
        <enricher doc:name="Enrich flowVars.exists and flowVars.dbRecord">
            <db:select config-ref="Derby-Glue" doc:name="Check existance">
                <db:parameterized-query><![CDATA[SELECT customer_id, address_id FROM md_order WHERE id=#[message.payload]]]></db:parameterized-query>
            </db:select>
            <enrich source="#[payload.size() > 0]" target="#[flowVars.exists]"/>
            <enrich source="#[payload]" target="#[flowVars.dbRecord]"/>
        </enricher>
        <choice doc:name="order exists or not">
            <when expression="#[flowVars.exists==true]">
                <scripting:component doc:name="Get order from id">
                    <scripting:script engine="Groovy"><![CDATA[import groovy.sql.*
import java.sql.*
import java.util.*

import fr.unice.polytech.soa1.misterdiscount.bdd.Order
import fr.unice.polytech.soa1.misterdiscount.bdd.OrderItem
import fr.unice.polytech.soa1.misterdiscount.business.Customer
import fr.unice.polytech.soa1.misterdiscount.business.Address

System.out.println("RECORD DB : " + flowVars['dbRecord']);

def sql = Sql.newInstance("jdbc:derby:memory:glue", new Properties());

// Get order
def orderQuery = "SELECT * FROM md_order WHERE id=" + message.payload;
def orderResult = sql.rows(orderQuery)[0]; // TODO: manage case 'order not found'

// Get customer
/*def customerQuery = "SELECT * FROM customer WHERE id=" + orderResult['CUSTOMER_ID'];
def customerResult = sql.rows(customerQuery)[0]; // TODO: manage case 'customer not found'

def customer = new Customer();
customer.setFirstName(customerResult['FIRST_NAME']);
customer.setLastName(customerResult['LAST_NAME']);*/

// Get address
def addressQuery = "SELECT * FROM address WHERE id=" + orderResult['ADDRESS_ID'];
def addressResult = sql.rows(addressQuery)[0]; // TODO: manage case 'address not found'

def address = new Address();
address.setStreetNb(addressResult['STREET_NB']);
address.setStreetName(addressResult['STREET_NAME']);
address.setZipCode(addressResult['ZIP_CODE']);
address.setCity(addressResult['CITY']);
address.setCountryCode(addressResult['COUNTRY_CODE']);

// Get items
def items = new ArrayList<OrderItem>();
def itemsQuery = "SELECT * FROM order_item WHERE order_id=" + message.payload;
def itemsResult = sql.rows(itemsQuery); // TODO: manage case 'address not found'

for (int i = 0; i < itemsResult.size(); i++) {
    OrderItem oi = new OrderItem();
    oi.setProductRef(itemsResult[i]['PRODUCT_REF']);
    oi.setQuantity(itemsResult[i]['QUANTITY']);
    oi.setUnitPrice(itemsResult[i]['UNIT_PRICE']);
    
    items.add(oi);
}

// Build order
def order = new Order();
//order.setCustomer(customer);
order.setId(message.payload);
order.setAddress(address);
order.setItems(items);
order.setCost(orderResult['COST']);
order.setDate(orderResult['ORDER_DATE']);
order.setCarrier(orderResult['CARRIER']);
order.setTrackingNb(orderResult['TRACKING_NB']);

return order;
]]></scripting:script>
                </scripting:component>
                <data-mapper:transform config-ref="Pojo_To_Pojo" doc:name="Pojo To Pojo"/>
                <flow-ref name="get-eta-and-url" doc:name="get-eta-and-url"/>
                <enricher target="#[message.payload.status]" doc:name="Enrich message.payload.status">
                    <set-payload value="SENT" doc:name="Set Payload"/>
                </enricher>
            </when>
            <otherwise>
                <scripting:component doc:name="OrderNotFoundException">
                    <scripting:script engine="Groovy"><![CDATA[import fr.unice.polytech.soa1.misterdiscount.business.exceptions.OrderNotFoundException

throw new OrderNotFoundException(String.valueOf(payload));]]></scripting:script>
                </scripting:component>
            </otherwise>
        </choice>
    </flow>
    <sub-flow name="get-eta-and-url" doc:name="get-eta-and-url">
        <set-variable variableName="trackingNb" value="#[payload.deliveryTracking.trackingNb]" doc:name="save trackingNb"/>
        <choice doc:name="Which carrier?">
            <when expression="#[payload.deliveryTracking.carrier=='FedPS']">
                <enricher target="#[message.payload.deliveryTracking.url]" doc:name="Enrich message.payload.deliveryTracking.url">
                    <set-payload value="http://localhost:8080/fedps/follow/parcels/#[flowVars.trackingNb]" doc:name="Set Payload"/>
                </enricher>
                <enricher target="#[message.payload.eta]" doc:name="Enrich message.payload.eta">
                    <processor-chain doc:name="Processor Chain">
                        <expression-transformer expression="#[new Object[]{}]" doc:name="init request"/>
                        <http:outbound-endpoint exchange-pattern="request-response" method="GET" address="http://localhost:8080/fedps/follow/parcels/#[flowVars.trackingNb]" doc:name="localhost:8080/fedps/follow/"/>
                        <json:json-to-object-transformer returnClass="java.lang.Object" doc:name="JSON to Object"/>
                        <set-payload value="#[message.payload['eta']]" doc:name="eta"/>
                    </processor-chain>
                </enricher>
            </when>
            <otherwise>
                <logger message="Unknown carrier" level="INFO" doc:name="Unknown carrier"/>
            </otherwise>
        </choice>
    </sub-flow>
   <!--  <flow name="integrationFlow1" doc:name="integrationFlow1">
        <http:inbound-endpoint exchange-pattern="request-response" host="localhost" port="8081" doc:name="HTTP"/>
        <choice doc:name="http.method">
            <when expression="message.inboundProperties['http.method'] == 'GET'">
                <set-payload value="Nice. Payload is #[message.payload]" doc:name="Set Payload"/>
            </when>
            <otherwise>
                <set-payload value="Bad request" doc:name="Set Payload"/>
            </otherwise>
        </choice>
    </flow>-->
    <flow name="MisterDiscount-Catalogue-WS" doc:name="MisterDiscount-Catalogue-WS">
        <http:inbound-endpoint exchange-pattern="request-response" host="localhost" port="8081" path="misterdiscount/catalogue" doc:name="http://localhost:8081/misterdiscount/catalogue"/>
        <cxf:jaxws-service serviceClass="fr.unice.polytech.soa1.misterdiscount.services.Catalogue" doc:name="Catalogue"/>
        <set-variable variableName="operation" value="#[flowVars.cxf_operation.localPart]" doc:name="operation?"/>
        <choice doc:name="new or existing customer?">
            <when expression="#[operation == &quot;RegisterCatalogueExistingCustomer&quot;]">
                <logger message="RegisterCatalogueExistingCustomer" level="INFO" doc:name="RegisterCatalogueExistingCustomer"/>
                <db:update config-ref="Derby-Glue" doc:name="update customer">
                    <db:parameterized-query><![CDATA[UPDATE customer
SET catalogue=true
WHERE id=#[message.payload]]]></db:parameterized-query>
                </db:update>
            </when>
            <when expression="#[operation == &quot;RegisterCatalogueNewCustomer&quot;]">
                <logger message="RegisterCatalogueNewCustomer" level="INFO" doc:name="RegisterCatalogueNewCustomer"/>
                <db:insert config-ref="Derby-Glue" doc:name="insert address">
                    <db:parameterized-query><![CDATA[INSERT INTO address (street_nb, street_name, zip_code, city, country_code)
VALUES (
        #[message.payload.address.streetNb],
        #[message.payload.address.streetName],
        #[message.payload.address.zipCode],
        #[message.payload.address.city],
        #[message.payload.address.countryCode]
)]]></db:parameterized-query>
                </db:insert>
                <db:insert config-ref="Derby-Glue" doc:name="insert customer">
                    <db:parameterized-query><![CDATA[INSERT INTO customer (first_name, last_name, catalogue, address_id)
VALUES (
    #[message.payload.firstName],
    #[message.payload.lastName],
    true,
    (SELECT max(id) FROM address)
)]]></db:parameterized-query>
                </db:insert>
            </when>
            <when expression="#[operation == &quot;GetAddressesToSend&quot;]">
                <scripting:component doc:name="GetAddressesToSend">
                    <scripting:script engine="Groovy"><![CDATA[import groovy.sql.*
import java.sql.*
import java.util.*

import fr.unice.polytech.soa1.misterdiscount.business.Address

def sql = Sql.newInstance("jdbc:derby:memory:glue", new Properties());

def addresses = new ArrayList<Address>();
def addressesQuery = "SELECT * FROM address LEFT JOIN customer ON customer.address_id = address.id WHERE customer.catalogue = true";
def addressesResult = sql.rows(addressesQuery);

List<Address> result = new ArrayList<Address>();

for (int i = 0; i < addressesResult.size(); i++) {
	Address a = new Address();
	a.setStreetNb(addressesResult[i]['STREET_NB']);
	a.setStreetName(addressesResult[i]['STREET_NAME']);
	a.setZipCode(addressesResult[i]['ZIP_CODE']);
	a.setCity(addressesResult[i]['CITY']);
	a.setCountryCode(addressesResult[i]['COUNTRY_CODE']);
    
    result.add(a);
}

return result;]]></scripting:script>
                </scripting:component>
            </when>
            <otherwise>
                <logger message="Unknown Operation" level="INFO" doc:name="Unknown Operation"/>
            </otherwise>
        </choice>
    </flow>
</mule>
